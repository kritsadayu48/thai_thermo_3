// lib/main.dart
import 'dart:io';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/services.dart';
import 'package:flutter/foundation.dart' show kIsWeb;
import 'package:provider/provider.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:google_fonts/google_fonts.dart';
import 'services/fcm_service.dart';
import 'services/earthquake_service.dart';
import 'services/notification_service.dart';
import 'services/earthquake_probability_service.dart';
import 'screens/home_screen.dart';
import 'services/api_service.dart';
import 'dart:convert';

// ‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Firebase ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Firebase CLI
import 'firebase_options.dart';

// Function to diagnose iOS-specific notification issues
Future<void> diagnoseIOSNotifications() async {
  if (!Platform.isIOS) {
    debugPrint('‚ö†Ô∏è This function is only for iOS devices');
    return;
  }
  
  debugPrint('üîç Starting iOS notification diagnostics...');
  
  try {
    // Check notification permissions
    final messaging = FirebaseMessaging.instance;
    final settings = await messaging.getNotificationSettings();
    
    debugPrint('üì± iOS Notification Authorization Status: ${settings.authorizationStatus}');
    
    // Check APNS token
    final apnsToken = await messaging.getAPNSToken();
    debugPrint('üîë APNS Token: ${apnsToken ?? "None"}');
    
    // Check FCM token
    final fcmToken = await messaging.getToken();
    debugPrint('üîë FCM Token: ${fcmToken ?? "None"}');
    
    // Check if sound files exist
    final notificationService = NotificationService();
    await notificationService.initialize();
    
    // Add this line to fix the undefined prefs error
    final prefs = await SharedPreferences.getInstance();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    debugPrint('üîÑ Testing direct server connection...');
    final deviceId = prefs.getString('device_id');
    if (deviceId != null) {
      final result = await ApiService.checkEarthquakes();
      if (result != null) {
        debugPrint('‚úÖ Server connection successful');
        debugPrint('üìä Server returned ${result['earthquakes']?.length ?? 0} earthquakes');
      } else {
        debugPrint('‚ùå ISSUE DETECTED: Could not connect to server');
        debugPrint('üí° SOLUTION: Check server status and internet connection');
      }
    } else {
      debugPrint('‚ùå ISSUE DETECTED: No device ID found');
      debugPrint('üí° SOLUTION: Reinstall app or clear app data to generate a new device ID');
    }
  } catch (e) {
    debugPrint('‚ùå Error during iOS notification diagnostics: $e');
  }
}

// Function to diagnose notification issues
Future<void> runNotificationDiagnostics() async {
  debugPrint('üîç Starting comprehensive notification diagnostics...');
  
  try {
    // Run notification service diagnostics
    final notificationService = NotificationService();
    final notificationResults = await notificationService.runNotificationDiagnostics();
    
    // Run FCM diagnostics
    final fcmService = FCMService();
    final fcmResults = await fcmService.runFCMDiagnostics();
    
    // Check system settings
    if (Platform.isAndroid) {
      debugPrint('üì± For Android: Please check if battery optimization is disabled for this app');
      debugPrint('üì± For Android: Check notification permission in system settings');
    } else if (Platform.isIOS) {
      debugPrint('üì± For iOS: Check notification permission in system settings');
      debugPrint('üì± For iOS: Make sure Focus modes are not blocking notifications');
    }
    
    // Save diagnostic results to SharedPreferences for later review
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('last_notification_diagnostics', DateTime.now().toIso8601String());
    
    // Detailed permission information
    final permissionGranted = notificationResults['permissionsGranted'] ?? false;
    if (!permissionGranted) {
      debugPrint('‚ùå ISSUE DETECTED: Notification permissions are not granted');
      debugPrint('üí° SOLUTION: Open app settings to grant notification permission');
    } else {
      debugPrint('‚úÖ Notification permissions are granted');
    }
    
    // Check FCM token and registration
    final hasToken = fcmResults['hasToken'] ?? false;
    final registrationSuccess = fcmResults['registrationSuccess'] ?? false;
    
    if (!hasToken) {
      debugPrint('‚ùå ISSUE DETECTED: No valid FCM token found');
      debugPrint('üí° SOLUTION: Check internet connection and Firebase configuration');
    } else if (!registrationSuccess) {
      debugPrint('‚ùå ISSUE DETECTED: FCM token not registered with server');
      debugPrint('üí° SOLUTION: Check server connection and try refreshing token');
    } else {
      debugPrint('‚úÖ FCM token exists and is registered with server');
    }
    
    // Final summary
    debugPrint('üìä Notification diagnostics complete.');
    debugPrint(
      'üìù SUMMARY: Permissions: ${permissionGranted ? "‚úì" : "‚úó"}, '
      'FCM Token: ${hasToken ? "‚úì" : "‚úó"}, '
      'Registration: ${registrationSuccess ? "‚úì" : "‚úó"}'
    );
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    debugPrint('üîÑ Testing direct server connection...');
    final deviceId = prefs.getString('device_id');
    if (deviceId != null) {
      final result = await ApiService.checkEarthquakes();
      if (result != null) {
        debugPrint('‚úÖ Server connection successful');
        debugPrint('üìä Server returned ${result['earthquakes']?.length ?? 0} earthquakes');
      } else {
        debugPrint('‚ùå ISSUE DETECTED: Could not connect to server');
        debugPrint('üí° SOLUTION: Check server status and internet connection');
      }
    } else {
      debugPrint('‚ùå ISSUE DETECTED: No device ID found');
      debugPrint('üí° SOLUTION: Reinstall app or clear app data to generate a new device ID');
    }
  } catch (e) {
    debugPrint('‚ùå Error during notification diagnostics: $e');
  }
}

// Moved outside the MyApp class to make it a top-level function
Future<void> initializeServices() async {
  if (kIsWeb) {
    // For web, we skip the native notification services
    debugPrint('Running on web platform - skipping native notifications setup');
    return;
  }
  
  try {
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ local notification service ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠
    final notificationService = NotificationService();
    await notificationService.initialize();
    debugPrint('‚úÖ Local notification service initialized');
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Firebase Cloud Messaging (FCM)
    final fcmService = FCMService();
    await fcmService.initialize();
    debugPrint('‚úÖ FCM service initialized');
    
    // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ delay ‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ FCM service ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏á
    // await Future.delayed(const Duration(seconds: 2));
    
    // ‡πÉ‡∏ô iOS, ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤ Firebase Message ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡πÉ‡∏ä‡πâ Flutter Local Notifications ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
    if (Platform.isIOS) {
      debugPrint('üì± iOS detected - preventing duplicate notifications');
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥‡πÉ‡∏ô SharedPreferences
      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool('prevent_ios_duplicate_notifications', true);
      
      // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏≠‡∏á
      try {
        final messaging = FirebaseMessaging.instance;
        // ‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        await messaging.requestPermission(
          alert: true,
          badge: true,
          sound: true,
          criticalAlert: true,
          provisional: false,
        );
        // ‡πÅ‡∏ï‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ FCM ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏≠‡∏á
        await messaging.setForegroundNotificationPresentationOptions(
          alert: false,  // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô Foreground
          badge: true,
          sound: false,  // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á FCM 
        );
        debugPrint('‚úÖ iOS FCM notification setup complete (notifications will be handled by Local Notifications)');
      } catch (e) {
        debugPrint('‚ùå Error setting up iOS notification options: $e');
      }
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏î‡∏¥‡∏° (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà)
    try {
      final prefs = await SharedPreferences.getInstance();
      final deviceId = prefs.getString('device_id');
      
      if (deviceId != null) {
        debugPrint('üì± Using existing device ID: $deviceId');
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        final isFirstRun = prefs.getBool('is_first_run') ?? true;
        if (isFirstRun) {
          debugPrint('üìù ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏û - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á');
          
          // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏û‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
          final preventDuplicateNotifications = true;
          await prefs.setBool('prevent_duplicate_notifications', preventDuplicateNotifications);
          debugPrint('‚ö†Ô∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏û‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å: $preventDuplicateNotifications');
          
          // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ
          ApiService.checkEarthquakes();
          await prefs.setBool('is_first_run', false);
        }
      } else {
        debugPrint('‚ö†Ô∏è No device ID found in preferences');
      }
    } catch (e) {
      debugPrint('‚ùå Non-critical error checking settings: $e');
    }
    
    // ‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    debugPrint('‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    if (Platform.isIOS) {
      debugPrint('üì± iOS: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ FlutterLocalNotifications ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô');
    } else {
      debugPrint('üì± Android: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á FCM ‡πÅ‡∏•‡∏∞ FlutterLocalNotifications ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô');
    }
  } catch (e) {
    debugPrint('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: $e');
  }
}

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞ FCM
  await initializeServices();
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á earthquake service
  final earthquakeService = EarthquakeService();

  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => EarthquakeService()),
        Provider(create: (_) => EarthquakeProbabilityService()),
      ],
      child: MaterialApp(
        title: '‡πÑ‡∏´‡∏ß‡∏õ‡πà‡∏≤‡∏ß',
        debugShowCheckedModeBanner: false,
        theme: ThemeData(
          primaryColor: Colors.red[700],
          colorScheme: ColorScheme.fromSeed(seedColor: Colors.red),
          useMaterial3: true,
          textTheme: GoogleFonts.promptTextTheme(
            Theme.of(context).textTheme,
          ),
          fontFamily: GoogleFonts.prompt().fontFamily,
        ),
        home: const HomeScreen(),
      ),
    );
  }
}